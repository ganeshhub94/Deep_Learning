# -*- coding: utf-8 -*-
"""Facemask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14GJV_rib-GnJw1wPQ4g9sA6d7QqfIWAk
"""

import cv2,os

import numpy as np

data_path='/content/drive/My Drive/Mask Images'

target=[]
data=[]

categories=os.listdir(data_path)

categories

label=[i for i in range(len(categories))]

label

label_dict=dict(zip(categories,label))

label_dict

image_size=100
data=[]
target=[]
count=0

for category in categories:
  folder_path=os.path.join(data_path,category)
  image_names=os.listdir(folder_path)

  for img_name in image_names:
    img_path=os.path.join(folder_path,img_name)
    img=cv2.imread(img_path)
    gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    resized=cv2.resize(gray,(image_size,image_size))
    data.append(resized)
    target.append(label_dict[category])
    count+=1
    print(count)



len(data)

data=np.array(data)/255.0

data.shape

data.shape[0]

data=np.reshape(data,(data.shape[0],image_size,image_size,1))

data.shape

type(target)

target=np.array(target)

from keras.utils import np_utils

target_new=np_utils.to_categorical(target)

target

data

data.shape[1:]

"""Convolutional Neural Network **Architecture**"""

from keras.models import Sequential
from keras.layers import Dense,Flatten,Activation,Dropout
from keras.layers import Conv2D,MaxPooling2D
from keras.callbacks import ModelCheckpoint

model=Sequential()

#layer1
model.add(Conv2D(200,(3,3),input_shape=data.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#layer2
model.add(Conv2D(100,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Flatten())
model.add(Dropout(0.5))
model.add(Dense(50,activation='relu'))
model.add(Dense(2,activation='softmax'))


model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

model.summary()

from sklearn.model_selection import train_test_split

train_x,test_x,train_y,test_y=train_test_split(data,target_new,test_size=0.1,random_state=10)

print(train_x.shape)

test_x.shape

checkpoint = ModelCheckpoint('model-{epoch:03d}.model',monitor='val_loss',verbose=0,save_best_only=True,mode='auto')
history=model.fit(train_x,train_y,epochs=20,callbacks=[checkpoint],validation_split=0.2)

from matplotlib import pyplot as plt

plt.plot(history.history['loss'],'r',label='training loss')
plt.plot(history.history['val_loss'],label='validation loss')
plt.xlabel('# epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

plt.plot(history.history['accuracy'],'r',label='training accuracy')
plt.plot(history.history['val_accuracy'],label='validation accuracy')
plt.xlabel('# epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

model.evaluate(test_x,test_y)

## /content/model-017.model

print(target_new)